"use strict";
const logger = require("pomelo-logger").getLogger("pomelo-admin", __filename);
const utils = require("../util/utils");
let profiler = null;
try {
    profiler = require("v8-profiler");
}
catch (e) { }
const fs = require("fs");
const path = require("path");
const profileProxy_1 = require("../util/profileProxy");
if (!profiler) {
    module.exports.moduleError = 1;
}
module.exports.moduleId = "profiler";
class ProfilerModule {
    constructor(opts) {
        if (opts && opts.isMaster) {
            this.proxy = new profileProxy_1.ProfileProxy();
        }
    }
    monitorHandler(agent, msg, cb) {
        let type = msg.type, action = msg.action, uid = msg.uid, result = null;
        if (type === "CPU") {
            if (action === "start") {
                profiler.startProfiling();
            }
            else {
                result = profiler.stopProfiling();
                let res = {};
                res.head = result.getTopDownRoot();
                res.bottomUpHead = result.getBottomUpRoot();
                res.msg = msg;
                agent.notify(module.exports.moduleId, {
                    clientId: msg.clientId,
                    type: type,
                    body: res
                });
            }
        }
        else {
            let snapshot = profiler.takeSnapshot();
            let appBase = path.dirname(require.main.filename);
            let name = appBase + "/logs/" + utils.format(new Date()) + ".log";
            let log = fs.createWriteStream(name, { flags: "a" });
            let data;
            snapshot.serialize({
                onData: (chunk, size) => {
                    chunk = chunk + "";
                    data = {
                        method: "Profiler.addHeapSnapshotChunk",
                        params: {
                            uid: uid,
                            chunk: chunk
                        }
                    };
                    log.write(chunk);
                    agent.notify(module.exports.moduleId, {
                        clientId: msg.clientId,
                        type: type,
                        body: data
                    });
                },
                onEnd: function () {
                    agent.notify(module.exports.moduleId, {
                        clientId: msg.clientId,
                        type: type,
                        body: { params: { uid: uid } }
                    });
                    profiler.deleteAllSnapshots();
                }
            });
        }
    }
    masterHandler(agent, msg, cb) {
        if (msg.type === "CPU") {
            this.proxy.stopCallBack(msg.body, msg.clientId, agent);
        }
        else {
            this.proxy.takeSnapCallBack(msg.body);
        }
    }
    clientHandler(agent, msg, cb) {
        if (msg.action === "list") {
            list(agent, msg, cb);
            return;
        }
        if (typeof msg === "string") {
            msg = JSON.parse(msg);
        }
        let id = msg.id;
        let command = msg.method.split(".");
        let method = command[1];
        let params = msg.params;
        let clientId = msg.clientId;
        if (!this.proxy[method] ||
            typeof this.proxy[method] !== "function") {
            return;
        }
        this.proxy[method](id, params, clientId, agent);
    }
}
function list(agent, msg, cb) {
    let servers = [];
    let idMap = agent.idMap;
    for (let sid in idMap) {
        servers.push(sid);
    }
    cb(null, servers);
}
module.exports = (opts) => {
    if (!profiler) {
        return {};
    }
    else {
        return new ProfilerModule(opts);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZmlsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwcm9maWxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDOUUsdUNBQXdDO0FBRXhDLElBQUksUUFBUSxHQUFRLElBQUksQ0FBQztBQUV6QixJQUFJLENBQUM7SUFDSixRQUFRLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQztBQUVkLHlCQUEwQjtBQUMxQiw2QkFBOEI7QUFDOUIsdURBQW9EO0FBWXBELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNmLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztBQUNoQyxDQUFDO0FBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO0FBRXJDO0lBRUMsWUFBWSxJQUFTO1FBQ3BCLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUMzQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksMkJBQVksRUFBRSxDQUFDO1FBQ2pDLENBQUM7SUFDRixDQUFDO0lBRUQsY0FBYyxDQUFDLEtBQW1CLEVBQUUsR0FBUSxFQUFFLEVBQVk7UUFDekQsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksRUFDbEIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQ25CLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxFQUNiLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDZixFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNwQixFQUFF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QUFJLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO0lBRXhCLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDdkIsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBQ0QsRUFBRSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNuQixDQUFDO0FBdkhELGlCQUFTLENBQUMsSUFBUyxFQUFFLEVBQUU7SUFDdEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2YsTUFBTSxDQUFDLEVBQUUsQ0FBQztJQUNYLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNQLE1BQU0sQ0FBQyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDO0FBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbG9nZ2VyID0gcmVxdWlyZShcInBvbWVsby1sb2dnZXJcIikuZ2V0TG9nZ2VyKFwicG9tZWxvLWFkbWluXCIsIF9fZmlsZW5hbWUpO1xuaW1wb3J0IHV0aWxzID0gcmVxdWlyZShcIi4uL3V0aWwvdXRpbHNcIik7XG5cbmxldCBwcm9maWxlcjogYW55ID0gbnVsbDtcblxudHJ5IHtcblx0cHJvZmlsZXIgPSByZXF1aXJlKFwidjgtcHJvZmlsZXJcIik7XG59IGNhdGNoIChlKSB7fVxuXG5pbXBvcnQgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuaW1wb3J0IHsgUHJvZmlsZVByb3h5IH0gZnJvbSBcIi4uL3V0aWwvcHJvZmlsZVByb3h5XCI7XG5pbXBvcnQgeyBNYXN0ZXJBZ2VudCB9IGZyb20gXCIuLi9tYXN0ZXIvbWFzdGVyQWdlbnRcIjtcbmltcG9ydCB7IE1vbml0b3JBZ2VudCB9IGZyb20gXCIuLi9tb25pdG9yL21vbml0b3JBZ2VudFwiO1xuXG5leHBvcnQgPSAob3B0czogYW55KSA9PiB7XG5cdGlmICghcHJvZmlsZXIpIHtcblx0XHRyZXR1cm4ge307XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIG5ldyBQcm9maWxlck1vZHVsZShvcHRzKTtcblx0fVxufTtcblxuaWYgKCFwcm9maWxlcikge1xuXHRtb2R1bGUuZXhwb3J0cy5tb2R1bGVFcnJvciA9IDE7XG59XG5cbm1vZHVsZS5leHBvcnRzLm1vZHVsZUlkID0gXCJwcm9maWxlclwiO1xuXG5jbGFzcyBQcm9maWxlck1vZHVsZSB7XG5cdHByaXZhdGUgcHJveHk6IFByb2ZpbGVQcm94eTtcblx0Y29uc3RydWN0b3Iob3B0czogYW55KSB7XG5cdFx0aWYgKG9wdHMgJiYgb3B0cy5pc01hc3Rlcikge1xuXHRcdFx0dGhpcy5wcm94eSA9IG5ldyBQcm9maWxlUHJveHkoKTtcblx0XHR9XG5cdH1cblxuXHRtb25pdG9ySGFuZGxlcihhZ2VudDogTW9uaXRvckFnZW50LCBtc2c6IGFueSwgY2I6IEZ1bmN0aW9uKSB7XG5cdFx0bGV0IHR5cGUgPSBtc2cudHlwZSxcblx0XHRcdGFjdGlvbiA9IG1zZy5hY3Rpb24sXG5cdFx0XHR1aWQgPSBtc2cudWlkLFxuXHRcdFx0cmVzdWx0ID0gbnVsbDtcblx0XHRpZiAodHlwZSA9PT0gXCJDUFVcIikge1xuXHRcdFx0aWYgKGFjdGlvbiA9PT0gXCJzdGFydFwiKSB7XG5cdFx0XHRcdHByb2ZpbGVyLnN0YXJ0UHJvZmlsaW5nKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXN1bHQgPSBwcm9maWxlci5zdG9wUHJvZmlsaW5nKCk7XG5cdFx0XHRcdGxldCByZXM6IGFueSA9IHt9O1xuXHRcdFx0XHRyZXMuaGVhZCA9IHJlc3VsdC5nZXRUb3BEb3duUm9vdCgpO1xuXHRcdFx0XHRyZXMuYm90dG9tVXBIZWFkID0gcmVzdWx0LmdldEJvdHRvbVVwUm9vdCgpO1xuXHRcdFx0XHRyZXMubXNnID0gbXNnO1xuXHRcdFx0XHRhZ2VudC5ub3RpZnkobW9kdWxlLmV4cG9ydHMubW9kdWxlSWQsIHtcblx0XHRcdFx0XHRjbGllbnRJZDogbXNnLmNsaWVudElkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0Ym9keTogcmVzXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRsZXQgc25hcHNob3QgPSBwcm9maWxlci50YWtlU25hcHNob3QoKTtcblx0XHRcdGxldCBhcHBCYXNlID0gcGF0aC5kaXJuYW1lKCg8YW55PnJlcXVpcmUpLm1haW4uZmlsZW5hbWUpO1xuXHRcdFx0bGV0IG5hbWUgPSBhcHBCYXNlICsgXCIvbG9ncy9cIiArIHV0aWxzLmZvcm1hdChuZXcgRGF0ZSgpKSArIFwiLmxvZ1wiO1xuXHRcdFx0bGV0IGxvZyA9IGZzLmNyZWF0ZVdyaXRlU3RyZWFtKG5hbWUsIHsgZmxhZ3M6IFwiYVwiIH0pO1xuXHRcdFx0bGV0IGRhdGE7XG5cdFx0XHRzbmFwc2hvdC5zZXJpYWxpemUoe1xuXHRcdFx0XHRvbkRhdGE6IChjaHVuazogc3RyaW5nLCBzaXplOiBudW1iZXIpID0+IHtcblx0XHRcdFx0XHRjaHVuayA9IGNodW5rICsgXCJcIjtcblx0XHRcdFx0XHRkYXRhID0ge1xuXHRcdFx0XHRcdFx0bWV0aG9kOiBcIlByb2ZpbGVyLmFkZEhlYXBTbmFwc2hvdENodW5rXCIsXG5cdFx0XHRcdFx0XHRwYXJhbXM6IHtcblx0XHRcdFx0XHRcdFx0dWlkOiB1aWQsXG5cdFx0XHRcdFx0XHRcdGNodW5rOiBjaHVua1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0bG9nLndyaXRlKGNodW5rKTtcblx0XHRcdFx0XHRhZ2VudC5ub3RpZnkobW9kdWxlLmV4cG9ydHMubW9kdWxlSWQsIHtcblx0XHRcdFx0XHRcdGNsaWVudElkOiBtc2cuY2xpZW50SWQsXG5cdFx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdFx0Ym9keTogZGF0YVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRvbkVuZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0YWdlbnQubm90aWZ5KG1vZHVsZS5leHBvcnRzLm1vZHVsZUlkLCB7XG5cdFx0XHRcdFx0XHRjbGllbnRJZDogbXNnLmNsaWVudElkLFxuXHRcdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRcdGJvZHk6IHsgcGFyYW1zOiB7IHVpZDogdWlkIH0gfVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHByb2ZpbGVyLmRlbGV0ZUFsbFNuYXBzaG90cygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRtYXN0ZXJIYW5kbGVyKGFnZW50OiBNYXN0ZXJBZ2VudCwgbXNnOiBhbnksIGNiOiBGdW5jdGlvbikge1xuXHRcdGlmIChtc2cudHlwZSA9PT0gXCJDUFVcIikge1xuXHRcdFx0dGhpcy5wcm94eS5zdG9wQ2FsbEJhY2sobXNnLmJvZHksIG1zZy5jbGllbnRJZCwgYWdlbnQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnByb3h5LnRha2VTbmFwQ2FsbEJhY2sobXNnLmJvZHkpO1xuXHRcdH1cblx0fVxuXG5cdGNsaWVudEhhbmRsZXIoYWdlbnQ6IE1hc3RlckFnZW50LCBtc2c6IGFueSwgY2I6IEZ1bmN0aW9uKSB7XG5cdFx0aWYgKG1zZy5hY3Rpb24gPT09IFwibGlzdFwiKSB7XG5cdFx0XHRsaXN0KGFnZW50LCBtc2csIGNiKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIG1zZyA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0bXNnID0gSlNPTi5wYXJzZShtc2cpO1xuXHRcdH1cblx0XHRsZXQgaWQgPSBtc2cuaWQ7XG5cdFx0bGV0IGNvbW1hbmQgPSBtc2cubWV0aG9kLnNwbGl0KFwiLlwiKTtcblx0XHRsZXQgbWV0aG9kID0gY29tbWFuZFsxXTtcblx0XHRsZXQgcGFyYW1zID0gbXNnLnBhcmFtcztcblx0XHRsZXQgY2xpZW50SWQgPSBtc2cuY2xpZW50SWQ7XG5cblx0XHRpZiAoXG5cdFx0XHQhKDxhbnk+dGhpcy5wcm94eSlbbWV0aG9kXSB8fFxuXHRcdFx0dHlwZW9mICg8YW55PnRoaXMucHJveHkpW21ldGhvZF0gIT09IFwiZnVuY3Rpb25cIlxuXHRcdCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdCg8YW55PnRoaXMucHJveHkpW21ldGhvZF0oaWQsIHBhcmFtcywgY2xpZW50SWQsIGFnZW50KTtcblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0KGFnZW50OiBNYXN0ZXJBZ2VudCwgbXNnOiBhbnksIGNiOiBGdW5jdGlvbikge1xuXHRsZXQgc2VydmVycyA9IFtdO1xuXHRsZXQgaWRNYXAgPSBhZ2VudC5pZE1hcDtcblxuXHRmb3IgKGxldCBzaWQgaW4gaWRNYXApIHtcblx0XHRzZXJ2ZXJzLnB1c2goc2lkKTtcblx0fVxuXHRjYihudWxsLCBzZXJ2ZXJzKTtcbn1cbiJdfQ==