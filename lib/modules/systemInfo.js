"use strict";
const monitor = require("pomelo-monitor");
const logger = require("pomelo-logger").getLogger("pomelo-admin", __filename);
const DEFAULT_INTERVAL = 5 * 60; // in second
const DEFAULT_DELAY = 10; // in second
module.exports.moduleId = "systemInfo";
class SystemInfoModule {
    constructor(opts) {
        opts = opts || {};
        this.type = opts.type || "pull";
        this.interval = opts.interval || DEFAULT_INTERVAL;
        this.delay = opts.delay || DEFAULT_DELAY;
    }
    monitorHandler(agent, msg, cb) {
        //collect data
        monitor.sysmonitor.getSysInfo((err, data) => {
            agent.notify(module.exports.moduleId, {
                serverId: agent.id,
                body: data
            });
        });
    }
    masterHandler(agent, msg) {
        if (!msg) {
            agent.notifyAll(module.exports.moduleId);
            return;
        }
        let body = msg.body;
        let oneData = {
            Time: body.iostat.date,
            hostname: body.hostname,
            serverId: msg.serverId,
            cpu_user: body.iostat.cpu.cpu_user,
            cpu_nice: body.iostat.cpu.cpu_nice,
            cpu_system: body.iostat.cpu.cpu_system,
            cpu_iowait: body.iostat.cpu.cpu_iowait,
            cpu_steal: body.iostat.cpu.cpu_steal,
            cpu_idle: body.iostat.cpu.cpu_idle,
            tps: body.iostat.disk.tps,
            kb_read: body.iostat.disk.kb_read,
            kb_wrtn: body.iostat.disk.kb_wrtn,
            kb_read_per: body.iostat.disk.kb_read_per,
            kb_wrtn_per: body.iostat.disk.kb_wrtn_per,
            totalmem: body.totalmem,
            freemem: body.freemem,
            "free/total": body.freemem / body.totalmem,
            m_1: body.loadavg[0],
            m_5: body.loadavg[1],
            m_15: body.loadavg[2]
        };
        let data = agent.get(module.exports.moduleId);
        if (!data) {
            data = {};
            agent.set(module.exports.moduleId, data);
        }
        data[msg.serverId] = oneData;
    }
    clientHandler(agent, msg, cb) {
        cb(null, agent.get(module.exports.moduleId) || {});
    }
}
module.exports = (opts) => {
    return new SystemInfoModule(opts);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtSW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN5c3RlbUluZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVFBLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQzFDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTlFLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLFlBQVk7QUFDN0MsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDLENBQUMsWUFBWTtBQU10QyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxZQUFZLENBQUM7QUFFdkM7SUFJQyxZQUFZLElBQVU7UUFDckIsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQztRQUNoQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLElBQUksZ0JBQWdCLENBQUM7UUFDbEQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLGFBQWEsQ0FBQztJQUMxQyxDQUFDO0lBRUQsY0FBYyxDQUFDLEtBQWlDLEVBQUUsR0FBUSxFQUFFLEVBQVk7UUFDdkUsY0FBYztRQUNkLE9BQU8sQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBUSxFQUFFLElBQVMsRUFBRSxFQUFFO1lBQ3JELEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUU7Z0JBQ3JDLFFBQVEsRUFBRSxLQUFLLENBQUMsRUFBRTtnQkFDbEIsSUFBSSxFQUFFLElBQUk7YUFDVixDQUFDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxhQUFhLENBQUMsS0FBaUMsRUFBRSxHQUFRO1FBQ3hELEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNWLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN6QyxNQUFNLENBQUM7UUFDUixDQUFDO1FBRUQsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztRQUVwQixJQUFJLE9BQU8sR0FBRztZQUNiLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUk7WUFDdEIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUTtZQUN0QixRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUTtZQUNsQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUTtZQUNsQyxVQUFVLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVTtZQUN0QyxVQUFVLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVTtZQUN0QyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUztZQUNwQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUTtZQUNsQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRztZQUN6QixPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTztZQUNqQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTztZQUNqQyxXQUFXLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVztZQUN6QyxXQUFXLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVztZQUN6QyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ3JCLFlBQVksRUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRO1lBQzFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNwQixHQUFHLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDcEIsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ3JCLENBQUM7UUFFRixJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1gsSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNWLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUMsQ0FBQztRQUVELElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsT0FBTyxDQUFDO0lBQzlCLENBQUM7SUFFRCxhQUFhLENBQUMsS0FBaUMsRUFBRSxHQUFRLEVBQUUsRUFBWTtRQUN0RSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNwRCxDQUFDO0NBQ0Q7QUF0RUQsaUJBQVMsQ0FBQyxJQUFTLEVBQUUsRUFBRTtJQUN0QixNQUFNLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIFBvbWVsbyAtLSBjb25zb2xlTW9kdWxlIHN5c3RlbUluZm9cbiAqIENvcHlyaWdodChjKSAyMDEyIGZhbnRhc3luaSA8ZmFudGFzeW5pQDE2My5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuaW1wb3J0IHsgTWFzdGVyQWdlbnQgfSBmcm9tIFwiLi4vbWFzdGVyL21hc3RlckFnZW50XCI7XG5pbXBvcnQgeyBNb25pdG9yQWdlbnQgfSBmcm9tIFwiLi4vbW9uaXRvci9tb25pdG9yQWdlbnRcIjtcblxuY29uc3QgbW9uaXRvciA9IHJlcXVpcmUoXCJwb21lbG8tbW9uaXRvclwiKTtcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoXCJwb21lbG8tbG9nZ2VyXCIpLmdldExvZ2dlcihcInBvbWVsby1hZG1pblwiLCBfX2ZpbGVuYW1lKTtcblxuY29uc3QgREVGQVVMVF9JTlRFUlZBTCA9IDUgKiA2MDsgLy8gaW4gc2Vjb25kXG5jb25zdCBERUZBVUxUX0RFTEFZID0gMTA7IC8vIGluIHNlY29uZFxuXG5leHBvcnQgPSAob3B0czogYW55KSA9PiB7XG5cdHJldHVybiBuZXcgU3lzdGVtSW5mb01vZHVsZShvcHRzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLm1vZHVsZUlkID0gXCJzeXN0ZW1JbmZvXCI7XG5cbmNsYXNzIFN5c3RlbUluZm9Nb2R1bGUge1xuXHRyZWFkb25seSB0eXBlOiBzdHJpbmc7XG5cdHJlYWRvbmx5IGludGVydmFsOiBudW1iZXI7XG5cdHJlYWRvbmx5IGRlbGF5OiBudW1iZXI7XG5cdGNvbnN0cnVjdG9yKG9wdHM/OiBhbnkpIHtcblx0XHRvcHRzID0gb3B0cyB8fCB7fTtcblx0XHR0aGlzLnR5cGUgPSBvcHRzLnR5cGUgfHwgXCJwdWxsXCI7XG5cdFx0dGhpcy5pbnRlcnZhbCA9IG9wdHMuaW50ZXJ2YWwgfHwgREVGQVVMVF9JTlRFUlZBTDtcblx0XHR0aGlzLmRlbGF5ID0gb3B0cy5kZWxheSB8fCBERUZBVUxUX0RFTEFZO1xuXHR9XG5cblx0bW9uaXRvckhhbmRsZXIoYWdlbnQ6IE1hc3RlckFnZW50ICYgTW9uaXRvckFnZW50LCBtc2c6IGFueSwgY2I6IEZ1bmN0aW9uKSB7XG5cdFx0Ly9jb2xsZWN0IGRhdGFcblx0XHRtb25pdG9yLnN5c21vbml0b3IuZ2V0U3lzSW5mbygoZXJyOiBhbnksIGRhdGE6IGFueSkgPT4ge1xuXHRcdFx0YWdlbnQubm90aWZ5KG1vZHVsZS5leHBvcnRzLm1vZHVsZUlkLCB7XG5cdFx0XHRcdHNlcnZlcklkOiBhZ2VudC5pZCxcblx0XHRcdFx0Ym9keTogZGF0YVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXHRtYXN0ZXJIYW5kbGVyKGFnZW50OiBNYXN0ZXJBZ2VudCAmIE1vbml0b3JBZ2VudCwgbXNnOiBhbnkpIHtcblx0XHRpZiAoIW1zZykge1xuXHRcdFx0YWdlbnQubm90aWZ5QWxsKG1vZHVsZS5leHBvcnRzLm1vZHVsZUlkKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRsZXQgYm9keSA9IG1zZy5ib2R5O1xuXG5cdFx0bGV0IG9uZURhdGEgPSB7XG5cdFx0XHRUaW1lOiBib2R5Lmlvc3RhdC5kYXRlLFxuXHRcdFx0aG9zdG5hbWU6IGJvZHkuaG9zdG5hbWUsXG5cdFx0XHRzZXJ2ZXJJZDogbXNnLnNlcnZlcklkLFxuXHRcdFx0Y3B1X3VzZXI6IGJvZHkuaW9zdGF0LmNwdS5jcHVfdXNlcixcblx0XHRcdGNwdV9uaWNlOiBib2R5Lmlvc3RhdC5jcHUuY3B1X25pY2UsXG5cdFx0XHRjcHVfc3lzdGVtOiBib2R5Lmlvc3RhdC5jcHUuY3B1X3N5c3RlbSxcblx0XHRcdGNwdV9pb3dhaXQ6IGJvZHkuaW9zdGF0LmNwdS5jcHVfaW93YWl0LFxuXHRcdFx0Y3B1X3N0ZWFsOiBib2R5Lmlvc3RhdC5jcHUuY3B1X3N0ZWFsLFxuXHRcdFx0Y3B1X2lkbGU6IGJvZHkuaW9zdGF0LmNwdS5jcHVfaWRsZSxcblx0XHRcdHRwczogYm9keS5pb3N0YXQuZGlzay50cHMsXG5cdFx0XHRrYl9yZWFkOiBib2R5Lmlvc3RhdC5kaXNrLmtiX3JlYWQsXG5cdFx0XHRrYl93cnRuOiBib2R5Lmlvc3RhdC5kaXNrLmtiX3dydG4sXG5cdFx0XHRrYl9yZWFkX3BlcjogYm9keS5pb3N0YXQuZGlzay5rYl9yZWFkX3Blcixcblx0XHRcdGtiX3dydG5fcGVyOiBib2R5Lmlvc3RhdC5kaXNrLmtiX3dydG5fcGVyLFxuXHRcdFx0dG90YWxtZW06IGJvZHkudG90YWxtZW0sXG5cdFx0XHRmcmVlbWVtOiBib2R5LmZyZWVtZW0sXG5cdFx0XHRcImZyZWUvdG90YWxcIjogYm9keS5mcmVlbWVtIC8gYm9keS50b3RhbG1lbSxcblx0XHRcdG1fMTogYm9keS5sb2FkYXZnWzBdLFxuXHRcdFx0bV81OiBib2R5LmxvYWRhdmdbMV0sXG5cdFx0XHRtXzE1OiBib2R5LmxvYWRhdmdbMl1cblx0XHR9O1xuXG5cdFx0bGV0IGRhdGEgPSBhZ2VudC5nZXQobW9kdWxlLmV4cG9ydHMubW9kdWxlSWQpO1xuXHRcdGlmICghZGF0YSkge1xuXHRcdFx0ZGF0YSA9IHt9O1xuXHRcdFx0YWdlbnQuc2V0KG1vZHVsZS5leHBvcnRzLm1vZHVsZUlkLCBkYXRhKTtcblx0XHR9XG5cblx0XHRkYXRhW21zZy5zZXJ2ZXJJZF0gPSBvbmVEYXRhO1xuXHR9XG5cblx0Y2xpZW50SGFuZGxlcihhZ2VudDogTWFzdGVyQWdlbnQgJiBNb25pdG9yQWdlbnQsIG1zZzogYW55LCBjYjogRnVuY3Rpb24pIHtcblx0XHRjYihudWxsLCBhZ2VudC5nZXQobW9kdWxlLmV4cG9ydHMubW9kdWxlSWQpIHx8IHt9KTtcblx0fVxufVxuIl19