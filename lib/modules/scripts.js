"use strict";
/*!
 * Pomelo -- consoleModule runScript
 * Copyright(c) 2012 fantasyni <fantasyni@163.com>
 * MIT Licensed
 */
const monitor = require("pomelo-monitor");
const logger = require("pomelo-logger").getLogger("pomelo-admin", __filename);
const vm = require("vm");
const fs = require("fs");
const util = require("util");
const path = require("path");
module.exports.moduleId = "scripts";
class ScriptsModule {
    constructor(opts) {
        this.commands = {
            list: list,
            get: get,
            save: save,
            run: run
        };
        this.app = opts.app;
        this.root = opts.path;
    }
    monitorHandler(agent, msg, cb) {
        let context = {
            app: this.app,
            require: require,
            os: require("os"),
            fs: require("fs"),
            process: process,
            util: util
        };
        try {
            vm.runInNewContext(msg.script, context);
            let result = context.result;
            if (!result) {
                cb(null, "script result should be assigned to result value to script module context");
            }
            else {
                cb(null, result);
            }
        }
        catch (e) {
            cb(null, e.toString());
        }
        //cb(null, vm.runInContext(msg.script, context));
    }
    clientHandler(agent, msg, cb) {
        let fun = this.commands[msg.command];
        if (!fun || typeof fun !== "function") {
            cb("unknown command:" + msg.command);
            return;
        }
        fun(this, agent, msg, cb);
    }
}
/**
 * List server id and scripts file name
 */
function list(scriptModule, agent, msg, cb) {
    let servers = [];
    let scripts = [];
    let idMap = agent.idMap;
    for (let sid in idMap) {
        servers.push(sid);
    }
    fs.readdir(scriptModule.root, function (err, filenames) {
        if (err) {
            filenames = [];
        }
        for (let i = 0, l = filenames.length; i < l; i++) {
            scripts.push(filenames[i]);
        }
        cb(null, {
            servers: servers,
            scripts: scripts
        });
    });
}
/**
 * Get the content of the script file
 */
function get(scriptModule, agent, msg, cb) {
    let filename = msg.filename;
    if (!filename) {
        cb("empty filename");
        return;
    }
    fs.readFile(path.join(scriptModule.root, filename), "utf-8", function (err, data) {
        if (err) {
            logger.error("fail to read script file:" + filename + ", " + err.stack);
            cb("fail to read script with name:" + filename);
        }
        cb(null, data);
    });
}
/**
 * Save a script file that posted from admin console
 */
function save(scriptModule, agent, msg, cb) {
    let filepath = path.join(scriptModule.root, msg.filename);
    fs.writeFile(filepath, msg.body, function (err) {
        if (err) {
            logger.error("fail to write script file:" + msg.filename + ", " + err.stack);
            cb("fail to write script file:" + msg.filename);
            return;
        }
        cb();
    });
}
/**
 * Run the script on the specified server
 */
function run(scriptModule, agent, msg, cb) {
    agent.request(msg.serverId, module.exports.moduleId, msg, (err, res) => {
        if (err) {
            logger.error("fail to run script for " + err.stack);
            return;
        }
        cb(null, res);
    });
}
module.exports = (opts) => {
    return new ScriptsModule(opts);
};
//# sourceMappingURL=data:application/json;base64,