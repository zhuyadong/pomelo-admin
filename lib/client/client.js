"use strict";
/*!
 * Pomelo -- commandLine Client
 * Copyright(c) 2015 fantasyni <fantasyni@163.com>
 * MIT Licensed
 */
Object.defineProperty(exports, "__esModule", { value: true });
const protocol = require("../util/protocol");
const utils = require("../util/utils");
const mqttClient_1 = require("../protocol/mqtt/mqttClient");
class AdminClient {
    constructor(opt) {
        this.state = AdminClient.ST_INITED;
        this.id = "";
        this.reqId = 1;
        this.callbacks = {};
        this.listeners = {};
        this.state = AdminClient.ST_INITED;
        this.socket = null;
        opt = opt || {};
        this.username = opt["username"] || "";
        this.password = opt["password"] || "";
        this.md5 = opt["md5"] || false;
    }
    connect(id, host, port, cb) {
        this.id = id;
        console.log("try to connect " + host + ":" + port);
        this.socket = new mqttClient_1.MqttClient({
            id: id
        });
        this.socket.connect(host, port);
        // this.socket = io.connect('http://' + host + ':' + port, {
        // 	'force new connection': true,
        // 	'reconnect': false
        // });
        this.socket.on("connect", () => {
            this.state = AdminClient.ST_CONNECTED;
            if (this.md5) {
                this.password = utils.md5(this.password);
            }
            this.doSend("register", {
                type: "client",
                id: id,
                username: this.username,
                password: this.password,
                md5: this.md5
            });
        });
        this.socket.on("register", res => {
            if (res.code !== protocol.PRO_OK) {
                cb(res.msg);
                return;
            }
            this.state = AdminClient.ST_REGISTERED;
            cb();
        });
        this.socket.on("client", msg => {
            msg = protocol.parse(msg);
            if (msg.respId) {
                // response for request
                let cb = this.callbacks[msg.respId];
                delete this.callbacks[msg.respId];
                if (cb && typeof cb === "function") {
                    cb(msg.error, msg.body);
                }
            }
            else if (msg.moduleId) {
                // notify
                this.emit(msg.moduleId, msg);
            }
        });
        this.socket.on("error", err => {
            if (this.state < AdminClient.ST_CONNECTED) {
                cb(err);
            }
            this.emit("error", err);
        });
        this.socket.on("disconnect", reason => {
            this.state = AdminClient.ST_CLOSED;
            this.emit("close");
        });
    }
    request(moduleId, msg, cb) {
        let id = this.reqId++;
        // something dirty: attach current client id into msg
        msg = msg || {};
        msg.clientId = this.id;
        msg.username = this.username;
        let req = protocol.composeRequest(id, moduleId, msg);
        this.callbacks[id] = cb;
        this.doSend("client", req);
        // this.socket.emit('client', req);
    }
    notify(moduleId, msg) {
        // something dirty: attach current client id into msg
        msg = msg || {};
        msg.clientId = this.id;
        msg.username = this.username;
        let req = protocol.composeRequest(null, moduleId, msg);
        this.doSend("client", req);
        // this.socket.emit('client', req);
    }
    command(command, moduleId, msg, cb) {
        let id = this.reqId++;
        msg = msg || {};
        msg.clientId = this.id;
        msg.username = this.username;
        let commandReq = protocol.composeCommand(id, command, moduleId, msg);
        this.callbacks[id] = cb;
        this.doSend("client", commandReq);
        // this.socket.emit('client', commandReq);
    }
    doSend(topic, msg) {
        this.socket.send(topic, msg);
    }
    on(event, listener) {
        this.listeners[event] = this.listeners[event] || [];
        this.listeners[event].push(listener);
    }
    emit(event, ...other) {
        let listeners = this.listeners[event];
        if (!listeners || !listeners.length) {
            return;
        }
        let args = Array.prototype.slice.call(arguments, 1);
        let listener;
        for (let i = 0, l = listeners.length; i < l; i++) {
            listener = listeners[i];
            if (typeof listener === "function") {
                listener.apply(null, args);
            }
        }
    }
}
AdminClient.ST_INITED = 1;
AdminClient.ST_CONNECTED = 2;
AdminClient.ST_REGISTERED = 3;
AdminClient.ST_CLOSED = 4;
exports.AdminClient = AdminClient;
//# sourceMappingURL=data:application/json;base64,