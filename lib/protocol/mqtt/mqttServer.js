"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger = require("pomelo-logger").getLogger("pomelo-admin", "MqttServer");
const MqttCon = require("mqtt-connection");
const net = require("net");
const events_1 = require("events");
let curId = 1;
class MqttServer extends events_1.EventEmitter {
    constructor(opts, cb) {
        super();
        this.cb = cb;
        this.inited = false;
        this.closed = true;
    }
    listen(port) {
        //check status
        if (this.inited) {
            this.cb(new Error("already inited."));
            return;
        }
        this.inited = true;
        let self = this;
        this.server = new net.Server();
        this.server.listen(port);
        logger.info("[MqttServer] listen on %d", port);
        this.server.on("listening", this.emit.bind(this, "listening"));
        this.server.on("error", function (err) {
            // logger.error('mqtt server is error: %j', err.stack);
            self.emit("error", err);
        });
        this.server.on("connection", (stream) => {
            let socket = new MqttCon(stream);
            socket.id = curId++;
            socket.on("connect", (pkg) => {
                socket.connack({
                    returnCode: 0
                });
            });
            socket.on("publish", function (pkg) {
                let topic = pkg.topic;
                let msg = pkg.payload.toString();
                msg = JSON.parse(msg);
                // logger.debug('[MqttServer] publish %s %j', topic, msg);
                socket.emit(topic, msg);
            });
            socket.on("pingreq", function () {
                socket.pingresp();
            });
            socket.send = (topic, msg) => {
                socket.publish({
                    topic: topic,
                    payload: JSON.stringify(msg)
                });
            };
            self.emit("connection", socket);
        });
    }
    send(topic, msg) {
        this.socket.publish({
            topic: topic,
            payload: msg
        });
    }
    close() {
        if (this.closed) {
            return;
        }
        this.closed = true;
        this.server.close();
        this.emit("closed");
    }
}
exports.MqttServer = MqttServer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXF0dFNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1xdHRTZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUNoRiwyQ0FBNEM7QUFFNUMsMkJBQTRCO0FBQzVCLG1DQUFzQztBQUl0QyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7QUFFZCxnQkFBd0IsU0FBUSxxQkFBWTtJQUszQyxZQUFZLElBQVUsRUFBVSxFQUFhO1FBQzVDLEtBQUssRUFBRSxDQUFDO1FBRHVCLE9BQUUsR0FBRixFQUFFLENBQVc7UUFFNUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFZO1FBQ2xCLGNBQWM7UUFDZCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNqQixJQUFJLENBQUMsRUFBRyxDQUFDLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztZQUN2QyxNQUFNLENBQUM7UUFDUixDQUFDO1FBRUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFFbkIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRWhCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFekIsTUFBTSxDQUFDLElBQUksQ0FBQywyQkFBMkIsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUUvQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFFL0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQVMsR0FBRztZQUNuQyx1REFBdUQ7WUFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxNQUFjLEVBQUUsRUFBRTtZQUMvQyxJQUFJLE1BQU0sR0FBRyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNqQyxNQUFNLENBQUMsRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDO1lBRXBCLE1BQU0sQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBZSxFQUFFLEVBQUU7Z0JBQ3hDLE1BQU0sQ0FBQyxPQUFPLENBQUM7b0JBQ2QsVUFBVSxFQUFFLENBQUM7aUJBQ2IsQ0FBQyxDQUFDO1lBQ0osQ0FBQyxDQUFDLENBQUM7WUFFSCxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxVQUFTLEdBQWU7Z0JBQzVDLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7Z0JBQ3RCLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ2pDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUV0QiwwREFBMEQ7Z0JBQzFELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUU7Z0JBQ3BCLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNuQixDQUFDLENBQUMsQ0FBQztZQUVHLE1BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFhLEVBQUUsR0FBUSxFQUFFLEVBQUU7Z0JBQ2hELE1BQU0sQ0FBQyxPQUFPLENBQUM7b0JBQ2QsS0FBSyxFQUFFLEtBQUs7b0JBQ1osT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO2lCQUM1QixDQUFDLENBQUM7WUFDSixDQUFDLENBQUM7WUFFRixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFJLENBQUMsS0FBYSxFQUFFLEdBQVE7UUFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFDbkIsS0FBSyxFQUFFLEtBQUs7WUFDWixPQUFPLEVBQUUsR0FBRztTQUNaLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxLQUFLO1FBQ0osRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDakIsTUFBTSxDQUFDO1FBQ1IsQ0FBQztRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyQixDQUFDO0NBQ0Q7QUFwRkQsZ0NBb0ZDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbG9nZ2VyID0gcmVxdWlyZShcInBvbWVsby1sb2dnZXJcIikuZ2V0TG9nZ2VyKFwicG9tZWxvLWFkbWluXCIsIFwiTXF0dFNlcnZlclwiKTtcbmltcG9ydCBNcXR0Q29uID0gcmVxdWlyZShcIm1xdHQtY29ubmVjdGlvblwiKTtcbmltcG9ydCBVdGlsID0gcmVxdWlyZShcInV0aWxcIik7XG5pbXBvcnQgbmV0ID0gcmVxdWlyZShcIm5ldFwiKTtcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJldmVudHNcIjtcbmltcG9ydCB7IFNvY2tldCB9IGZyb20gXCJuZXRcIjtcbmltcG9ydCB7IE1xdHRQYWNrZXQgfSBmcm9tIFwiLi4vLi4vLi4vaW5kZXhcIjtcblxubGV0IGN1cklkID0gMTtcblxuZXhwb3J0IGNsYXNzIE1xdHRTZXJ2ZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuXHRwcml2YXRlIGluaXRlZDogYm9vbGVhbjtcblx0cHJpdmF0ZSBjbG9zZWQ6IGJvb2xlYW47XG5cdHByaXZhdGUgc2VydmVyOiBuZXQuU2VydmVyO1xuXHRwcml2YXRlIHNvY2tldDogTXF0dENvbjtcblx0Y29uc3RydWN0b3Iob3B0cz86IGFueSwgcHJpdmF0ZSBjYj86IEZ1bmN0aW9uKSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLmluaXRlZCA9IGZhbHNlO1xuXHRcdHRoaXMuY2xvc2VkID0gdHJ1ZTtcblx0fVxuXG5cdGxpc3Rlbihwb3J0OiBudW1iZXIpIHtcblx0XHQvL2NoZWNrIHN0YXR1c1xuXHRcdGlmICh0aGlzLmluaXRlZCkge1xuXHRcdFx0dGhpcy5jYiEobmV3IEVycm9yKFwiYWxyZWFkeSBpbml0ZWQuXCIpKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLmluaXRlZCA9IHRydWU7XG5cblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cblx0XHR0aGlzLnNlcnZlciA9IG5ldyBuZXQuU2VydmVyKCk7XG5cdFx0dGhpcy5zZXJ2ZXIubGlzdGVuKHBvcnQpO1xuXG5cdFx0bG9nZ2VyLmluZm8oXCJbTXF0dFNlcnZlcl0gbGlzdGVuIG9uICVkXCIsIHBvcnQpO1xuXG5cdFx0dGhpcy5zZXJ2ZXIub24oXCJsaXN0ZW5pbmdcIiwgdGhpcy5lbWl0LmJpbmQodGhpcywgXCJsaXN0ZW5pbmdcIikpO1xuXG5cdFx0dGhpcy5zZXJ2ZXIub24oXCJlcnJvclwiLCBmdW5jdGlvbihlcnIpIHtcblx0XHRcdC8vIGxvZ2dlci5lcnJvcignbXF0dCBzZXJ2ZXIgaXMgZXJyb3I6ICVqJywgZXJyLnN0YWNrKTtcblx0XHRcdHNlbGYuZW1pdChcImVycm9yXCIsIGVycik7XG5cdFx0fSk7XG5cblx0XHR0aGlzLnNlcnZlci5vbihcImNvbm5lY3Rpb25cIiwgKHN0cmVhbTogU29ja2V0KSA9PiB7XG5cdFx0XHRsZXQgc29ja2V0ID0gbmV3IE1xdHRDb24oc3RyZWFtKTtcblx0XHRcdHNvY2tldC5pZCA9IGN1cklkKys7XG5cblx0XHRcdHNvY2tldC5vbihcImNvbm5lY3RcIiwgKHBrZzogTXF0dFBhY2tldCkgPT4ge1xuXHRcdFx0XHRzb2NrZXQuY29ubmFjayh7XG5cdFx0XHRcdFx0cmV0dXJuQ29kZTogMFxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXG5cdFx0XHRzb2NrZXQub24oXCJwdWJsaXNoXCIsIGZ1bmN0aW9uKHBrZzogTXF0dFBhY2tldCkge1xuXHRcdFx0XHRsZXQgdG9waWMgPSBwa2cudG9waWM7XG5cdFx0XHRcdGxldCBtc2cgPSBwa2cucGF5bG9hZC50b1N0cmluZygpO1xuXHRcdFx0XHRtc2cgPSBKU09OLnBhcnNlKG1zZyk7XG5cblx0XHRcdFx0Ly8gbG9nZ2VyLmRlYnVnKCdbTXF0dFNlcnZlcl0gcHVibGlzaCAlcyAlaicsIHRvcGljLCBtc2cpO1xuXHRcdFx0XHRzb2NrZXQuZW1pdCh0b3BpYywgbXNnKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRzb2NrZXQub24oXCJwaW5ncmVxXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzb2NrZXQucGluZ3Jlc3AoKTtcblx0XHRcdH0pO1xuXG5cdFx0XHQoPGFueT5zb2NrZXQpLnNlbmQgPSAodG9waWM6IHN0cmluZywgbXNnOiBhbnkpID0+IHtcblx0XHRcdFx0c29ja2V0LnB1Ymxpc2goe1xuXHRcdFx0XHRcdHRvcGljOiB0b3BpYyxcblx0XHRcdFx0XHRwYXlsb2FkOiBKU09OLnN0cmluZ2lmeShtc2cpXG5cdFx0XHRcdH0pO1xuXHRcdFx0fTtcblxuXHRcdFx0c2VsZi5lbWl0KFwiY29ubmVjdGlvblwiLCBzb2NrZXQpO1xuXHRcdH0pO1xuXHR9XG5cblx0c2VuZCh0b3BpYzogc3RyaW5nLCBtc2c6IGFueSkge1xuXHRcdHRoaXMuc29ja2V0LnB1Ymxpc2goe1xuXHRcdFx0dG9waWM6IHRvcGljLFxuXHRcdFx0cGF5bG9hZDogbXNnXG5cdFx0fSk7XG5cdH1cblxuXHRjbG9zZSgpIHtcblx0XHRpZiAodGhpcy5jbG9zZWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLmNsb3NlZCA9IHRydWU7XG5cdFx0dGhpcy5zZXJ2ZXIuY2xvc2UoKTtcblx0XHR0aGlzLmVtaXQoXCJjbG9zZWRcIik7XG5cdH1cbn1cbiJdfQ==